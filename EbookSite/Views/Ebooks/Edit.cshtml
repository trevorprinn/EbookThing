@using EbookSite
@model EbookSite.Models.BookViewModel

@{
    ViewBag.Title = "Edit Book";
}

<h2>Edit</h2>

@Scripts.Render("~/bundles/jHtmlArea")
@Styles.Render("~/bundles/jHtmlAreaCss")

@Scripts.Render("~/bundles/combo")
@Styles.Render("~/Content/combo")

@Styles.Render("~/Content/tagger")
@Scripts.Render("~/bundles/tagger")

@Styles.Render("~/Content/datatables")
@Scripts.Render("~/bundles/datatables")

@using (Html.BeginForm("Edit", "Ebooks", FormMethod.Post, new { onsubmit = "return beforeSubmit();" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.BookId)


    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Title, new { @class = "form-control nomaxwidth" })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ComboBoxFor(model => model.Author, Model.Authors, new { @class = "form-control nomaxwidth" }, prependNewValue: "~")
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ComboBoxFor(model => model.Publisher, Model.Publishers, new { @class = "form-control nomaxwidth" }, prependNewValue: "~")
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control nomaxwidth", style = "width:100%" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.Tags, ViewBag.zzz as MultiSelectList)
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class ="text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BookIdents, "Identifiers", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table class="table" id="idents">
                    <thead>
                        <tr>
                            <th>Label</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var bi in Model.BookIdents.Keys) { 
                            <tr>
                                <td>@Html.TextBoxFor(m => bi, htmlAttributes: new { @class="form-control nomaxwidth" })</td>
                                <td>@Html.TextBoxFor(m => m.BookIdents[bi], htmlAttributes: new { @class = "form-control nomaxwidth" })</td>
                                <td><a role="button">Delete</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <a role="button" onclick="addIdent();">Add New Identifier</a>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<script>
    // Set the height of the textarea before converting it to an html editor
    $('#Description').height('150px');
    // Use a custom toolbar because bootstrap messes up the button heights for the header style buttons
    $('#Description').htmlarea({
        toolbar: [
            ["html"],
            ["bold", "italic", "underline", "strikethrough"],
            ["subscript", "superscript"],
            ["increasefontsize", "decreasefontsize"],
            ["orderedlist", "unorderedlist"],
            ["p"],
            ["cut", "copy", "paste"]
        ]
    });

    // Set the widths of the items that make up the editor so that it resizes correctly
    $('div.jHtmlArea').width('98%');
    $('div.jHtmlArea div').width('100%');
    $('div.jHtmlArea div iframe').width('100%');
    
</script>

<script>
    var tags = @Html.Raw(Model.TagsInfo);
    $(function () {
        $("#Tags").tagger({
            availableTags: tags,
            baseURL: "/Content/tagger/",
            displayHierarchy: false,
            indentMultiplier: 2,
            fieldWidth: null,
            freeTextInput: true,
            freeTextMessage: 'Add <em>%VALUE%</em> to list',
            freeTextPrefix: ''
        });
        $(".tagger").width("96%");
    });
</script>

<script>
    var identTable;
    $(document).ready(function() {
        identTable = $("#idents").DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "searching": false
        });

        $("#idents tbody").on("click", "a", function(){
            identTable.row($(this).parents("tr")).remove().draw();
        });
    });

</script>

<script>
    function beforeSubmit() {
        @* Copy the values in the first id column (ie the ident names) into the name attributes of the items in the second column.
           This will populate the BookIdents dictionary in the View Model with any changed or new names. *@
        var identKeys = identTable.column(0).nodes().to$();
        $(identKeys).each(function(ix) {
            var id = $(this).children().first().val();
            var cell = identTable.cell(ix, 1).nodes().to$().first().children().first().attr("name", "BookIdents[" + id + "]");
        });

        return true;
    }

    function addIdent() {
        identTable.row.add([
            "<input class='form-control nomaxwidth'></input>",
            "<input class='form-control nomaxwidth'></input>",
            "<a role='button'>Delete</a>",
        ]).draw();
    }
</script>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
